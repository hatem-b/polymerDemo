describe("Select Plugin",function(){beforeEach(function(){loadFixtures("select/selectFixture.html"),$("select").not(".disabled").material_select()}),describe("Select",function(){var e,t,o;beforeEach(function(){e=$("select.normal")}),it("should open dropdown and select option",function(n){t=e.parent().find("input.select-dropdown"),o=e.parent().find("ul.select-dropdown"),expect(t).toExist("Should dynamically generate select dropdown structure."),expect(o).toExist("Should dynamically generate select dropdown structure."),expect(t).toBeVisible("Should be hidden before dropdown is opened."),expect(o).toBeHidden("Should be hidden before dropdown is opened."),t.click(),setTimeout(function(){expect(o).toBeVisible("Should be visible after opening.");var e=o.find("li:not(.disabled)").first();e.click(),t.blur(),setTimeout(function(){expect(o).toBeHidden("Should be hidden after choosing item."),expect(t.val()).toEqual(e[0].innerText,"Value should equal chosen option."),n()},400)},400)}),it("should have pre-selected value",function(){t=e.parent().find("input.select-dropdown"),o=e.parent().find("ul.select-dropdown");var n=e.find("option[selected]");expect(t.val()).toEqual(n.text(),"Value should be equal to preselected option.")})}),describe("Multiple Select",function(){var e,t,o;beforeEach(function(){e=$("select.multiple")}),it("should open dropdown and select multiple options",function(n){t=e.parent().find("input.select-dropdown"),o=e.parent().find("ul.select-dropdown"),expect(t).toExist("Should dynamically generate select dropdown structure."),expect(o).toExist("Should dynamically generate select dropdown structure."),expect(t).toBeVisible("Should be hidden before dropdown is opened."),expect(o).toBeHidden("Should be hidden before dropdown is opened."),t.click(),setTimeout(function(){expect(o).toBeVisible("Should be visible after opening.");var i=o.find("li:not(.disabled)").first(),d=o.find("li:not(.disabled)").eq(1),l=o.find("li:not(.disabled)").eq(2);i.click(),$("body").click(),setTimeout(function(){expect(o).toBeHidden("Should be hidden after choosing item."),expect(e.val()).toEqual(["1","2","3"],"Actual select should have correct selected values."),expect(t.val()).toEqual(d[0].innerText+", "+l[0].innerText+", "+i[0].innerText,"Value should equal chosen multiple options."),n()},400)},400)}),it("should open dropdown and deselect multiple options",function(n){t=e.parent().find("input.select-dropdown"),o=e.parent().find("ul.select-dropdown"),expect(t).toExist("Should dynamically generate select dropdown structure."),expect(o).toExist("Should dynamically generate select dropdown structure."),expect(t).toBeVisible("Should be hidden before dropdown is opened."),expect(o).toBeHidden("Should be hidden before dropdown is opened."),t.click(),setTimeout(function(){expect(o).toBeVisible("Should be visible after opening.");var i=o.find("li.disabled"),d=o.find("li:not(.disabled)").eq(1),l=o.find("li:not(.disabled)").eq(2);d.click(),l.click(),$("body").click(),setTimeout(function(){expect(o).toBeHidden("Should be hidden after choosing item."),expect(e.val()).toEqual(null,"Actual select element should be empty because none chosen."),expect(t.val()).toEqual(i[0].innerText,"Value should equal default because none chosen."),n()},400)},400)}),it("should have multiple pre-selected values",function(){t=e.parent().find("input.select-dropdown"),o=e.parent().find("ul.select-dropdown");var n=e.find("option[selected]").eq(0),i=e.find("option[selected]").eq(1);expect(t.val()).toEqual(n.text()+", "+i.text(),"Value should be equal to preselected option.")})}),describe("Optgroup Select",function(){var e,t,o,n,i;beforeEach(function(){e=$("select.optgroup")}),it("should open dropdown and select options",function(n){t=e.parent().find("input.select-dropdown"),o=e.parent().find("ul.select-dropdown");var i=o.find("li.optgroup");e.find("optgroup").each(function(e){expect($(this).attr("label")).toEqual(i.eq(e)[0].innerText,"should generate optgroup structure.")}),expect(t).toExist("Should dynamically generate select dropdown structure."),expect(o).toExist("Should dynamically generate select dropdown structure."),expect(t).toBeVisible("Should be hidden before dropdown is opened."),expect(o).toBeHidden("Should be hidden before dropdown is opened."),t.click(),setTimeout(function(){expect(o).toBeVisible("Should be visible after opening.");var e=o.find("li:not(.disabled):not(.optgroup)").eq(1);e.click(),t.blur(),setTimeout(function(){expect(o).toBeHidden("Should be hidden after choosing item."),expect(t.val()).toEqual(e[0].innerText,"Value should be equal to selected option."),n()},400)},400)}),it("should have options inside optgroup indented",function(){n=e.parent().find("li.optgroup + li"),i=e.parent().find("ul li:last-child"),expect(n).toHaveClass("optgroup-option","Should have optgroup-option class"),expect(i).not.toHaveClass("optgroup-option","Should not have optgroup-option class")}),it("should not do anything when optgroup li clicked",function(n){t=e.parent().find("input.select-dropdown"),o=e.parent().find("ul.select-dropdown");var i=t.val(),d=o.find("li.optgroup");e.find("optgroup").each(function(e){expect($(this).attr("label")).toEqual(d.eq(e)[0].innerText,"should generate optgroup structure.")}),expect(t).toExist("Should dynamically generate select dropdown structure."),expect(o).toExist("Should dynamically generate select dropdown structure."),expect(t).toBeVisible("Should be hidden before dropdown is opened."),expect(o).toBeHidden("Should be hidden before dropdown is opened."),t.click(),setTimeout(function(){expect(o).toBeVisible("Should be visible after opening.");var e=o.find("li.optgroup").first();e.click(),t.blur(),setTimeout(function(){expect(o).toBeHidden("Should be hidden after choosing invalid item."),expect(t.val()).toEqual(i,"Value should be equal to original option."),n()},400)},400)})})});